/*
* Ho Chi Minh City University of Technology
* Faculty of Computer Science and Engineering
* Initial code for Assignment 1
* Programming Fundamentals Spring 2022
* Author: Vu Van Tien
* Date: 10.02.2022
*/

//The library here is concretely set, students are not allowed to include any other libraries.
#ifndef studyInPink_h
#define studyInPink_h

#include <iostream>
#include <iomanip>
#include <cmath>
#include <string>
#include <fstream>
#include <sstream>

using namespace std;

////////////////////////////////////////////////////////////////////////
///STUDENT'S ANSWER BEGINS HERE
///Complete the following functions
///DO NOT modify any parameters in the functions.
////////////////////////////////////////////////////////////////////////
bool ba_so(string s){
    if ((s.size()!=3)||(s=="000")) return false;
    for(int i=0;i<s.size();i++){
        if (!((s[i]>='0')&&(s[i])<='9')) return false;
    }
    return true;
}
int string_to_int(string s){
    int ket_qua=0;
    if (s=="0") return ket_qua;
    for (int i=0;i<s.size();i++)
    {
        ket_qua*=10;
        ket_qua+=(s[i]-'0');
    }
    return ket_qua;
}
void correct_ntb1(int arr[]){
    for(int i=0;i<10;i++){
        arr[i]%=10;
    }
}
string arr_to_string(int arr[],int size_arr){
    string ans;
    for(int i=0;i<10;i++){
        ans+=char(arr[i]+'0');
    }
    return ans;
}

string notebook1(string ntb1) {
    // Complete this function to gain point
    ifstream f(ntb1);
    if(f.is_open()){
        string thua,n;
        getline(f,thua,'/');
        getline(f,thua,'/');
        f>>n;
        f.ignore();
        if (!ba_so(n)) return "000000000";
        int n1=string_to_int(n);
        int arr[10]={0};
        int in;
        for(int i=0;i<n1;i++){
            f>>in;
            if((in<10)&&(in>=0)) arr[in]++;
        }
        f.close();
        correct_ntb1(arr);
        return arr_to_string(arr,10);
    }



    return "000000000";
}
bool nam_so(string s,int& n2){
    if (s.size()!=5) return false;
    for(int i=0;i<s.size();i++){
        if (!((s[i]>='0')&&(s[i])<='9')) return false;
    }
    n2=string_to_int(s);
    if(!((n2>=5)&&(n2<=100))) return false;
    return true;
}
int dem_chuoi(string s,string key){
    int count=-1,i=-1;
    do{
        count++;
        i=s.find(key,i+1);
    }while(i!=-1);
    return count;
}
string int_to_string(int n){
    string ans;
    while(n!=0){
        ans=(char)(n%10+'0')+ans;
        n/=10;
    }

    return ans;
}
string correct_cntP(int& cntP){
    if(cntP%100000==cntP) cntP=cntP*cntP;
    string ans=int_to_string(cntP);
    while(ans.size()<10){
        ans+="9";
    }
    return ans;
}
string notebook2(string ntb2) {
    // Complete this function to gain point
    ifstream f(ntb2);
    if (f.is_open()){
        //doc va xu li n2
        string s;
        f>>s;
        f.ignore();
        int n2=-1;
        if(!nam_so(s,n2)) return "1111111111";
        //xu ly n2 dong tiep theo
        string in;
        int cntP=0;
        for(int i=0;i<n2;i++){
            getline(f,in);
            cntP+=dem_chuoi(in,"Pink");
            cntP+=dem_chuoi(in,"pink");
        }
        return correct_cntP(cntP);

    }
    return "000000000";
}

void read_ntb3(string ntb3,int arr[][10]){
    ifstream f(ntb3);
    if (f.is_open()){
        string line,in;
        for(int i=0;i<10;i++){
            getline(f,line);
            stringstream ss(line);
            for(int j=0;j<10;j++){
                getline(ss,in,'|');
                stringstream ss(in);
                ss>>arr[i][j];
                if (arr[i][j]<0) arr[i][j]=-arr[i][j];
            }
        }
    }
}
bool is_prime(int n){
    if (n==2) return true;
    else if ((n<2) || ((n%2)==0)) return false;
    for (int i=3; i<n;i+=2) {
        if (( n % i)==0) return false;
    }
    return true;
}
void up_to_prime(int& n){
    while(!is_prime(n)){
        n++;
    }
}
int calc_next_fibo(int fibo[],int n) {
    if (n==0) return 1;
    if (n==1) return 1;
    return fibo[n-1]+fibo[n-2];
}
void calc_all_fibo(int fibo[]){
    int i=0;
    // co 46 so fibo<INT_MAX
    while(i<46){
        fibo[i]=calc_next_fibo(fibo,i);
        //cout<<fibo[i]<<" ";
        i++;
    }
}
void up_to_fibo(int fibo[],int& n){
    int i=0;
    while(n>fibo[i]){
        i++;
    }
    n=fibo[i];
}
void swap(int& a,int& b){
    int temp=a;
    a=b;
    b=temp;
}
void sort_two(int&a,int&b){
    if (a<=b) return;
    else swap(a,b);
}
void sort_three(int&a,int&b,int&c){
    sort_two(a,b);
    sort_two(b,c);
    sort_two(a,b);
}
void correct_matrix_ntb3(int arr[][10],int fibo[]){
    for(int i=0;i<10;i++){
        for(int j=i+1;j<10;j++){
            up_to_prime(arr[i][j]);
            up_to_fibo(fibo,arr[j][i]);
        }
    }
    for(int i=0;i<10;i++){
        sort_three(arr[i][7],arr[i][8],arr[i][9]);
    }
}
void find_max_line(int arr[][10],int max_line[]){
    for(int i=0;i<10;i++){
        max_line[i]=0;
        int max_temp=arr[i][0];
        for(int j=1;j<10;j++){
            if (arr[i][j]>=max_temp) {
                max_line[i]=j;
                max_temp=arr[i][j];
            }
        }
    }
}

string notebook3(string ntb3) {
    // Complete this function to gain point
    int arr[10][10],fibo[46],max_line[10];
    read_ntb3("tc1-file-ntb3.txt",arr);
    calc_all_fibo(fibo);
    correct_matrix_ntb3(arr,fibo);
    find_max_line(arr,max_line);
    string ans=arr_to_string(max_line,10);
    return ans;
    return "000000000";
}

string g(string a,string b){
    string ans;
    int c=0;
    for(int i=0;i<a.size();i++){
        int temp=(int)(a[i]+b[i]-'0'-'0')+c;
        ans+=(temp%10)+'0';
        c=temp/10;
    }
    return ans;
}
string generateListPasswords(string pwd1, string pwd2, string pwd3) {
    // Complete this function to gain point
    string ans;
    ans=ans+pwd1+';'+pwd2+';'+pwd3+';';
    ans=ans+g(pwd1,pwd2)+';'+g(pwd1,pwd3)+';'+g(pwd2,pwd3)+';';
    ans=ans+g(g(pwd1,pwd2),pwd3)+';'+g(pwd1,g(pwd2,pwd3))+';'+g(g(pwd1,pwd2),g(pwd1,pwd3));
    return ans;
    return "000000000";
}

void check(int& row,int& col,int& time,const int one_move){
    if (row>=100){
        row=99;
        time-=one_move;
    }
    else if(row<0){
        row=0;
        time-=one_move;
    }
    else if (col>=100){
        col=99;
        time-=one_move;
    }
    else if(col<0){
        col=0;
        time-=one_move;
    }
}
void taxi_moves(int arr[][100],string moves){
    int time=0,one_move=9;
    arr[0][0]=time;
    int row=0,col=0;
    for(int i=0;i<moves.size();i++){
        if (moves[i]=='U') {
            row-=1;
            time+=one_move;
            arr[row][col]=time;
        }
        else if (moves[i]=='D') {
            row+=1;
            time+=one_move;
            arr[row][col]=time;
        }
        else if (moves[i]=='R') {
            col+=1;
            time+=one_move;
            arr[row][col]=time;
        }
        else if (moves[i]=='L') {
            col-=1;
            time+=one_move;
            arr[row][col]=time;
        }
        check(row,col,time,one_move);

    }
}
struct point{int x=0;int y=0;};
void read_points(string points,point all_point[],int& id){
    int i=0;
    id=0;
    int sepa;
    while(i<points.size()){
        sepa=points.find(',',i+1);
        all_point[id].x=string_to_int(points.substr(i+1,sepa-i-1));
        i=sepa;
        sepa=points.find(')',i+1);
        all_point[id].y=string_to_int(points.substr(i+1,sepa-i-1));
        id++;
        i=sepa+2;
    }
}
void calc_time(int& time,point before,point after){
    time+=14*(abs(before.x-after.x)+abs(before.y-after.y));
}
void check_catch(
    point all_points[],
    int arr[][100],
    bool& catch_taxi,
    string& outTimes,
    string & outCatchUps,
    int id
){
    int time=0;
    catch_taxi=false;
    point start_catch;
    start_catch.x=0;
    start_catch.y=0;
    calc_time(time,start_catch,all_points[0]);
    if (time<=arr[all_points[0].x][all_points[0].y]){
        catch_taxi=true;
        outTimes=outTimes+int_to_string(time)+';';
        outCatchUps=outCatchUps+'Y'+';';
    }
    else{
        outTimes=outTimes+int_to_string(time)+';';
        outCatchUps=outCatchUps+'N'+';';
    }
    int i=1;
    while(i<id){
        if (!catch_taxi){
            calc_time(time,all_points[i-1],all_points[i]);
            if (time<=arr[all_points[i].x][all_points[i].y]){
                catch_taxi=true;
                outTimes=outTimes+int_to_string(time)+';';
                outCatchUps=outCatchUps+'Y'+';';
            }
            else{
                outTimes=outTimes+int_to_string(time)+';';
                outCatchUps=outCatchUps+'N'+';';
            }
        }
        else{
            outTimes=outTimes+'-'+';';
            outCatchUps=outCatchUps+'-'+';';
        }
        i++;
    }
    outTimes.erase(outTimes.size()-1,1);
    outCatchUps.erase(outCatchUps.size()-1,1);
}
bool chaseTaxi(
    int arr[100][100],
    string points,
    string moves,
    string & outTimes,
    string & outCatchUps
) {
    // Complete this function to gain point
    arr[100][100];
    for(int i=0;i<100;i++){
        for(int j=0;j<100;j++){
            arr[i][j]=-9;
        }
    }
    taxi_moves(arr,moves);

    point all_point[200];
    int id=0;
    bool catch_taxi=false;
    read_points(points,all_point,id);

    check_catch(all_point,arr,catch_taxi,outTimes,outCatchUps,id);
    return catch_taxi;
}

void read_tag(string tag,string& email,int& n3){
    ifstream f(tag);
    if(f.is_open()){
        string thua;
        f>>thua>>email;
        f.ignore();
        getline(f,thua,':');
        f>>n3;
        f.close();
    }

}
string enterLaptop(string tag, string message) {
    // Complete this function to gain point
    string email;
    int n3=-1;
    read_tag(tag,email,n3);
    string pwdL;
    for(int i=0;i<n3;i++){
        pwdL+=message;
    }
    return email+';'+pwdL;
    return "";
}
////////////////////////////////////////////////
///END OF STUDENT'S ANSWER
////////////////////////////////////////////////
#endif /* studyInPink_h */
